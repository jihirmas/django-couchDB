"""
Django settings for djangocouch project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-rtvo1&jnq^kk#+c-x=vd-t0pq&+u-6&ggog=ws)i+-vo3xtf7&'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'djangocouchapp'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'djangocouch.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'djangocouch.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Couch DB Config
COUCHDB_SERVER = 'http://my-couchdb:5984'

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

database_name = 'grupo10'

from cloudant.client import CouchDB
from elasticsearch import Elasticsearch

client = CouchDB("admin", "admin", url='http://my-couchdb:5984', connect=True)
if database_name in client:
    MY_DATABASE = client[database_name]
else:
    MY_DATABASE = client.create_database('grupo10')

APPEND_SLASH = False


try:
    CLIENT_ES = Elasticsearch(
        ["https://my-elasticsearch:9200"],  
        http_auth=("elastic", "admin"),                           
        verify_certs=False,
    )

    SEARCH_ENGINE_ACTIVE = False



    mappings_books = {
        'properties':{
            'name': {'type': 'text'},
            'author': {'type': 'text'},
            'date_of_publication': {'type': 'text'},
            'summary': {'type': 'text'},
            'type': {'type': 'text'},
        }
    }
    mappings_reviews = {
        'properties':{
            'book': {'type': 'text'},
            'review': {'type': 'text'},
            'score': {'type': 'integer'},
            'up_votes': {'type': 'integer'},
            'type': {'type': 'text'},
        }
    }

    if not CLIENT_ES.indices.exists(index='books') and CLIENT_ES.ping():
        CLIENT_ES.indices.create(index='books', mappings=mappings_books)
        SEARCH_ENGINE_ACTIVE = True
        



    if not CLIENT_ES.indices.exists(index='reviews') and CLIENT_ES.ping():
        CLIENT_ES.indices.create(index='reviews', mappings=mappings_reviews)
        SEARCH_ENGINE_ACTIVE = True

except:
    SEARCH_ENGINE_ACTIVE = False



CACHE_TTL = 60 * 15

USE_REDIS = os.getenv('USE_REDIS', '0') == '1'

if USE_REDIS:
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': 'redis://my-redis:6379/1',  # La URL donde Redis est√° corriendo
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            }
        }
    }


SESSION_ENGINE = 'django.contrib.sessions.backends.signed_cookies'
SESSION_COOKIE_AGE = 1209600  # 2 semanas en segundos

MEDIA_ROOT = os.path.join(BASE_DIR,"media")
MEDIA_URL = "/media/"